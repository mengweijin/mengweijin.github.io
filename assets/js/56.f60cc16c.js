(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{472:function(s,t,a){"use strict";a.r(t);var n=a(28),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"规范的做法-配置-springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规范的做法-配置-springboot"}},[s._v("#")]),s._v(" （规范的做法）配置 SpringBoot")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ssl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 密钥库，单向认证。也可以配置绝对路径：key-store: C:\\Users\\mengweijin\\keystore.jks")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("key-store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" classpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("keystore.jks\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("key-store-password")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("key-store-type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" JKS\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("key-alias")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" mengweijin\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 客户端证书认证，双向认证。可选值为：none、want 和 need")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("client-auth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" need\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 信任库，这里需要配置 truststore")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("trust-store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" classpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("truststore.jks\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("trust-store-password")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("trust-store-type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" JKS\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("trust-store-provider")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" SUN\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("需要分别配置Key Store 和 Trust Store 的文件、密码等信息，即使是同一个文件。")]),s._v(" "),a("p",[s._v("需要注意的是，server.ssl.client-auth有三个可配置的值：none、want 和 need。双向验证应该配置为 need；none 表示不验证客户端；want 表示会验证，但不强制验证，即验证失败也可以成功建立连接。")]),s._v(" "),a("p",[s._v("注意：如果启动 SpringBoot 时报错 java.io.IOException:Invalid keystore format，请检查 maven 中是否有如下配置，改为 false 即可。但一般情况下，证书文件都是放在服务器上面的，不会打在 jar 包中，因此，不会有这个影响。这个错误多见与开发环境。")]),s._v(" "),a("p",[s._v("如果改为 false 会影响其他功能，那么就不建议把 jks 文件和受影响的功能的文件全部放到相同的 src/main/resources 目录下，建议分开文件夹放，并修改 maven 中的配置。")]),s._v(" "),a("div",{staticClass:"language-xml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("resources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- 防止 JKS 被 maven 错误解析 --\x3e")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("directory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("src/main/resources"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("directory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("filtering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("false"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("filtering")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("resources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"规范的做法-分别创建服务端-服务-a-和客户端-服务-b-的-keystore、-truststore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规范的做法-分别创建服务端-服务-a-和客户端-服务-b-的-keystore、-truststore"}},[s._v("#")]),s._v(" （规范的做法）分别创建服务端（服务 A）和客户端（服务 B）的 keystore、 truststore")]),s._v(" "),a("p",[s._v("从上面 SpringBoot 的配置中可以得知，一个应用如果启用双向认证，理论上需要一个 keystore 和一个 truststore（不规范的做法是只使用相同的一个密钥库）。那么假如两个服务 A 和 B 都需要做双向认证，就需要分别创建 服务 A 和 服务 B 的 keystore 和 truststore（共计四个密钥库，只是 truststore 用来导入保存自己应用信任的客户端证书，可以不需要设置密码）。")]),s._v(" "),a("p",[s._v("由于个人测试用，为了方便起见，以下我们的 keystore 和 truststore 都使用同一个密钥库。因此，我们只需要给服务 A 创建一个密钥库（mengweijin.jks）作为服务端，给服务 B 创建一个密钥库（client.jks）作为客户端，然后把对方的证书导入到自己的密钥库就是添加了信任。")]),s._v(" "),a("p",[s._v("为了测试方便，我们只对服务端的服务 A（使用 mengweijin.jks）开启双向认证，也就是说，要把客户端 client.jks 导出的证书 client.cer 导入到服务端的 truststore（这里也作为 keystore，两个密钥库合一了而已。）mengweijin.jks 中，服务 A 就信任了来自服务 B 的证书。")]),s._v(" "),a("p",[s._v("此时，B 服务在调用 A 服务时，只需要带上 B 服务自己由 client.jks 导出的 client.crt 和 client.key 文件，就可以通过服务 A 的客户端认证。")]),s._v(" "),a("h2",{attrs:{id:"正式开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正式开始"}},[s._v("#")]),s._v(" 正式开始")]),s._v(" "),a("p",[s._v("整个过程如下。注意：密码统一为 123456")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建服务端密钥库 mengweijin.jks")]),s._v("\nkeytool -genkeypair -alias mengweijin -validity "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36500")]),s._v(" -keyalg RSA -dname "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"CN=mengweijin.com,OU=com.mengweijin,O=mengweijin,L=xi an,ST=shan xi, C=CN"')]),s._v(" -keypass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -storepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -storetype JKS -keystore mengweijin.jks\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 导出服务端证书文件")]),s._v("\nkeytool -v -export -alias mengweijin -keystore mengweijin.jks -storepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -rfc -file mengweijin.crt\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成客户端的密钥库 client.jks")]),s._v("\nkeytool -genkeypair -alias client -validity "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("36500")]),s._v(" -keyalg RSA -dname "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"CN=client.com,OU=com.client,O=client,L=xi an,ST=shan xi, C=CN"')]),s._v(" -keypass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -storepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("  -storetype JKS -keystore client.jks \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 导出客户端证书文件")]),s._v("\nkeytool -v -export -alias client -keystore client.jks -storepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -rfc -file client.crt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把客户端证书（client.crt中要处理的条目的别名为 client）导入到服务端 truststore 中（是否信任此证书? [否]:  Y）")]),s._v("\nkeytool -import -file client.crt -alias client -keystore mengweijin.jks -storepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果要对客户端也做双向认证，那就把服务端证书（mengweijin.crt中要处理的条目的别名为 mengweijin）导入到客户端 truststore 中（是否信任此证书? [否]:  Y）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里测试只针对服务端，客户端不需要开启双向认证，因此跳过。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#keytool -import -file mengweijin.crt -alias mengweijin -keystore client.jks -storepass 123456")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检验服务端是否具有自己的private key和客户端的cert")]),s._v("\nkeytool -list -keystore mengweijin.jks -storepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 示例：")]),s._v("\nC:"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("Source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("gitee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("quickboot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("sample-quickboot-mybatis-plus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("resources"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("keytool -list -keystore mengweijin.jks -storepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n密钥库类型: jks\n密钥库提供方: SUN\n您的密钥库包含 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 个条目\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以在这里看到，条目为 client 证书指纹标记为：trustedCertEntry")]),s._v("\nclient, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2021")]),s._v("-4-24, trustedCertEntry,\n证书指纹 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SHA1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": D9:4D:8D:84:7E:70:66:DB:CD:00:00:38:43:F5:59:26:5B:00:9F:E9\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 而在这里看到，条目为 mengweijin 证书指纹标记为：PrivateKeyEntry")]),s._v("\nmengweijin, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2021")]),s._v("-4-24, PrivateKeyEntry,\n证书指纹 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SHA1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":45:EB:40:01:EC:E4:7B:E0:57:79:DD:1B:DD:12:7A:39:0B:9F:52\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("p",[s._v("成功执行完上述步骤后，会生成4个文件：")]),s._v(" "),a("ul",[a("li",[s._v("服务端密钥文件：mengweijin.jks")]),s._v(" "),a("li",[s._v("服务端cert文件：mengweijin.crt")]),s._v(" "),a("li",[s._v("客户端密钥文件：client.jks")]),s._v(" "),a("li",[s._v("客户端cert文件：client.crt")])]),s._v(" "),a("p",[s._v("实际上 crt 文件可以不要了，因为已经导入对方的Trust Store里面去了。也就是在文件 mengweijin.jks 里，包含了服务端的私钥、公钥还有客户端的公钥。")]),s._v(" "),a("p",[s._v("由于客户端需要携带证书（client.crt 和 client.key）访问 url, 因此这里再导出客户端的 client.p12，然后导出 client.key。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# client.p12")]),s._v("\nkeytool -v -importkeystore -srcstoretype JKS -srckeystore client.jks -srcstorepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -srcalias client -srckeypass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -deststoretype PKCS12 -destkeystore client.p12 -deststorepass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -destalias client -destkeypass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# client.key")]),s._v("\nopenssl pkcs12 -in client.p12 -nocerts -nodes -out client.key -password pass:123456\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"配置-springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-springboot"}},[s._v("#")]),s._v(" 配置 SpringBoot")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ssl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 密钥库，单向认证。也可以配置绝对路径：key-store: C:\\Users\\mengweijin\\mengweijin.jks")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("key-store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" classpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("mengweijin.jks\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("key-store-password")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("key-store-type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" JKS\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("key-alias")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" mengweijin\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 客户端证书认证，双向认证。可选值为：none、want 和 need")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("client-auth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" need\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 信任库，这里需要配置 truststore")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("trust-store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" classpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("mengweijin.jks\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("trust-store-password")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("trust-store-type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" JKS\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("trust-store-provider")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" SUN\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"用-postman-测试双向验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-postman-测试双向验证"}},[s._v("#")]),s._v(" 用 Postman 测试双向验证")]),s._v(" "),a("p",[s._v("访问 URL: https://localhost:8080/user/get")]),s._v(" "),a("p",[s._v("返回 Could not get response")]),s._v(" "),a("p",[s._v("无法建立https连接，无法访问。原因就是Postman作为客户端并没有合法的证书。")]),s._v(" "),a("p",[s._v("为了建立连接，应该要把客户端的密钥文件给Postman使用。因为JKS是Java的密钥文件格式，我们需要使用通用的PKCS12格式。\n把 p12 证书导入 postman: 点击右上角的齿轮按钮 -> settings -> 弹出设置对话框")]),s._v(" "),a("ul",[a("li",[s._v("General -> 关闭 SSL certificate verification 选项")]),s._v(" "),a("li",[s._v("Certificates -> Add Certificate\n"),a("ul",[a("li",[s._v("Host: https://localhost:8080")]),s._v(" "),a("li",[s._v("PFX file: 选择生成的 client.p12 文件")]),s._v(" "),a("li",[s._v("Passphrase: 123456(证书密码)")])])])]),s._v(" "),a("p",[s._v("保存后，再次用 postman 访问 URL：https://localhost:8080/user/get")]),s._v(" "),a("p",[s._v("如果 postman 依然报错：Error: self signed certificate，请检查当前 URL 设置请求参数和 Request Header 的那个界面，找到 settings 选项卡，关闭 Enable SSL certificate verification 选项即可。")]),s._v(" "),a("p",[s._v("再次访问接口，就成功了。")]),s._v(" "),a("p",[s._v("或者我们可以把密钥文件拆成private key(client.key)和cert(client.crt)，命令如下：")]),s._v(" "),a("p",[s._v("把客户端的密钥文件配置到Postman上，再次访问 URL。")]),s._v(" "),a("h2",{attrs:{id:"用curl命令测试-windows-下不成功"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用curl命令测试-windows-下不成功"}},[s._v("#")]),s._v(" 用curl命令测试（windows 下不成功）")]),s._v(" "),a("p",[s._v("没有安装Postman怎么办呢？还好，用强大的curl命令也是可以测试的。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -k --cert client.crt --key client.key https://localhost:8080/user/get \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 下面命令可以查看建立SSL连接详情")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -v -k --cert client.crt --key client.key https://localhost:8080/user/get \n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果觉得指定两个文件太麻烦，可以只生成一个文件，命令如下：")]),s._v("\nopenssl pkcs12 -nodes -in client.p12 -out client_all.pem\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 则连接命令变成了如下（需要指定密码）：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -k --cert client_all.pem:123456 https://localhost:8080/user/get \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"用浏览器测试-windows-下不成功-即使配置了-hosts-使用域名访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用浏览器测试-windows-下不成功-即使配置了-hosts-使用域名访问"}},[s._v("#")]),s._v(" 用浏览器测试（windows 下不成功，即使配置了 hosts，使用域名访问）")]),s._v(" "),a("p",[s._v("访问 URL: https://localhost:8080/user/get")]),s._v(" "),a("p",[s._v("然后我将生成的证书导入到浏览器中，重启浏览器继续访问测试接口，就会提示我们选择证书，点击我们导入的证书就可以正常访问了。")]),s._v(" "),a("p",[s._v("如何在浏览器中导入证书呢？")]),s._v(" "),a("p",[s._v("打开谷歌浏览器，找到设置->安全->证书管理->导入，按步骤提示导入就可以了，需要输入密码就是我们前面设置的 123456, 当然你设置了其他的密码，正常输入就可以了。然后重启浏览器再次访问就会提示我们选择证书，选择我们导入的证书，点击确定就可以了。")])])}),[],!1,null,null,null);t.default=e.exports}}]);