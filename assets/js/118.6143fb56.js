(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{538:function(e,a,n){"use strict";n.r(a);var s=n(28),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("├─finishBeanFactoryInitialization(beanFactory); Spring 核心方法中的\n│ ├─beanFactory.preInstantiateSingletons();\n│ │ ├─getBean(beanName);\n│ │ │ ├─doGetBean(name, null, null, false);\n│ │ │ │ ├─if (mbd.isSingleton()) {\n│ │ │ │ │ ├─下面的 getSingleton 方法传入了一个 Lambda 表达式，并在 getSingleton 中调用了传入的 lambda 表达式，创建了 bean 实例。\n│ │ │ │ │ ├─sharedInstance = getSingleton(beanName, () -> {\n│ │ │ │ │ │ ├─return createBean(beanName, mbd, args);\n│ │ │ │ │ │ │ ├─Object beanInstance = doCreateBean(beanName, mbdToUse, args);\n│ │ │ │ │ │ │ │ ├─instanceWrapper = createBeanInstance(beanName, mbd, args);\n│ │ │ │ │ │ │ │ ├─下面是依赖注入的核心方法（非常重要）\n│ │ │ │ │ │ │ │ ├─populateBean(beanName, mbd, instanceWrapper);\n│ │ │ │ │ │ │ │ ├─下面是依赖注入完成后的调用（非常重要）\n│ │ │ │ │ │ │ │ ├─exposedObject = initializeBean(beanName, exposedObject, mbd);\n│ │ │ │ │ │ │ │ │ ├─wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("h3",{attrs:{id:"applicationcontextawareprocessor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#applicationcontextawareprocessor"}},[e._v("#")]),e._v(" ApplicationContextAwareProcessor")]),e._v(" "),n("p",[e._v("支撑了对 Aware 接口属性的设置。如：")]),e._v(" "),n("ul",[n("li",[e._v("EnvironmentAware")]),e._v(" "),n("li",[e._v("EmbeddedValueResolverAware")]),e._v(" "),n("li",[e._v("ResourceLoaderAware")]),e._v(" "),n("li",[e._v("ApplicationEventPublisherAware")]),e._v(" "),n("li",[e._v("MessageSourceAware")]),e._v(" "),n("li",[e._v("ApplicationContextAware")])])])}),[],!1,null,null,null);a.default=t.exports}}]);